import numpy as np
import pandas as pd

from tf.keras.applications import VGG16

model = VGG16 (
		include_top=True,
		weights="imagenet",
		input_tensor=None,
		input_shape=None,
		pooling=None,
		classes=1000,
		classifier_activation="softmax",
	      )
# example of using the vgg16 model as a feature extraction model
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from keras.applications.vgg16 import preprocess_input
from keras.applications.vgg16 import decode_predictions
from keras.applications.vgg16 import VGG16
from keras.models import Model
	from pickle import dump
	model = VGG16()
	model2 = Model(inputs=model.inputs, outputs=model.layers[-2].output)
	model.summary()
	model2.summary()
	model2.get_config()
model2.get_config() == model.get_config()
	for l1, l2 in zip(mdl.layers, mdl2.layers):
		print(l1.get_config() == l2.get_config())
		for l1, l2 in zip(model_vgg16.layers, model2.layers):
			print(l1.get_config() == l2.get_config())
			model_vgg16 = model
			for l1, l2 in zip(model_vgg16.layers, model2.layers):
	print(l1.get_config() == l2.get_config())
	model_vgg16.layers.get_config()
	zip(model_vgg16.layers)
	from tensorflow.keras.layers import Input, Conv2D, Dense, Flatten
	from tensorflow.keras.models import Model

	ipt = Input(shape=(16, 16, 16))
	x   = Conv2D(12, 8, 1)(ipt)
	x   = Flatten()(x)
out = Dense(16)(x)

model = Model(ipt, out)
	model.compile('adam', 'mse')

	X = np.random.randn(10, 16, 16, 16)  # toy data
	Y = np.random.randn(10, 16)  # toy labels
	for _ in range(10):
		model.train_on_batch(X, Y)

		def get_weights_print_stats(layer):
	W = layer.get_weights()
	print(len(W))
	for w in W:
		print(w.shape)
		return W

		def hist_weights(weights, bins=500):
			for weight in weights:
			plt.hist(np.ndarray.flatten(weight), bins=bins)

			W = get_weights_print_stats(model.layers[1])
# 2
# (8, 8, 16, 12)
# (12,)

hist_weights(W)
	import matplot as plt
	import matpyplot as plt
	from matpyplot import pyplot as plt
	import matplotlib.pyplot as plt
	from tensorflow.keras.layers import Input, Conv2D, Dense, Flatten
	from tensorflow.keras.models import Model

	ipt = Input(shape=(16, 16, 16))
	x   = Conv2D(12, 8, 1)(ipt)
	x   = Flatten()(x)
out = Dense(16)(x)

model = Model(ipt, out)
	model.compile('adam', 'mse')

	X = np.random.randn(10, 16, 16, 16)  # toy data
	Y = np.random.randn(10, 16)  # toy labels
	for _ in range(10):
		model.train_on_batch(X, Y)

		def get_weights_print_stats(layer):
	W = layer.get_weights()
	print(len(W))
	for w in W:
		print(w.shape)
		return W

		def hist_weights(weights, bins=20):
			for weight in weights:
			plt.hist(np.ndarray.flatten(weight), bins=bins)

			W = get_weights_print_stats(model.layers[1])
# 2
# (8, 8, 16, 12)
# (12,)

	hist_weights(W)
	plt.show()
model.shape()
	for layer in model.layers:
print(layer.shape())
	model.layers
	model.layers.layer[0]
	model.layers[0]
model.layers[0].get_config()
	for layer in model.layers:
print(layer.get_config())
	for layer in model.layers:
print(layer.get_config().batch_input_shape)
	for layer in model.layers:
	print(layer.get_config().'batch_input_shape')
	for layer in model.layers:
	print(layer.get_config()['batch_input_shape'])
	for layer in model.layers:
print(type(layer.get_config()))
	for layer in model.layers:
	print(layer.get_config().get('batch_input_shape'))
	for layer in model.layers:
	print(layer.get_config().get('name'))
	for layer in model.layers:
	print(layer.get_config())
model = VGG16()
	for layer in model.layers:
	print(layer.get_config().get('name'))
	for layer in model.layers:
	print(layer.get_config().get('batch_input_shape'))
	for layer in model.layers:
print(layer.get_config())
	for layer in model.layers:
	print(layer.get_config().get('units'))
	for layer in model.layers:
	print(layer.get_config().get('kernel_size'))
	for layer in model.layers:
	print(layer.get_config().get('size'))
	for layer in model.layers:
	print(layer.get_config().get('%size'))
	for layer in model.layers:
	print(layer.get_config().get('*size'))
	for layer in model.layers:
	print(layer.get_config().get('pool_size'))
	for layer in model.layers:
	print(layer.get_config().get('strides'))
	history
